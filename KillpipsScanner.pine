// @version=6
indicator("Killpips Scanner", overlay=true)
import TradingView/ta/9

showKill = input.bool(true, "Show Killpips Status", group="Settings")
smEMA = input.int(21, "Standard EMA", minval=1, group="Settings")
bigEMA = input.int(200, "Longer EMA", minval=1, group="Settings")
stLength = input.int(11, "RSI Length", minval=1, group="Settings")
rsiOB = input.int(80, "RSI Overbought Value", minval=1, group="Settings")
rsiOS = input.int(20, "RSI Oversold Value", minval=1, group="Settings")
stMultiplier = input.int(2, "SuperTrend Multiplier", minval=0, step=1, group="Settings")
rsiLen = input.int(11, "SuperTrend Length", minval=1, group="Settings")

useExtendedSession = input.bool(false, "Use Extended Session", group="Opening Range")
sessionTimeInput = input.session("0930-1600", "Regular Trading Hours", group="Opening Range")
rangeMin = input.int(15, "Opening Range Minutes", minval=1, maxval=60, group="Opening Range")

bool useES = input.bool(true, "Use ES", group="Futures List")
bool useNQ = input.bool(true, "Use NQ", group="Futures List")
bool useVIX = input.bool(true, "Use VIX", group="Futures List")
bool useYM = input.bool(true, "Use YM",  group="Futures List")
bool useNDX = input.bool(true, "Use NDX",  group="Futures List")
bool useRTY = input.bool(true, "Use RTY",  group="Futures List")
bool useFDAX = input.bool(true, "Use FDAX",  group="Futures List")

bool useGC = input.bool(true, "Use Gold",  group="Commodities List")
bool useSI = input.bool(true, "Use Silver",  group="Commodities List")
bool useHG = input.bool(true, "Use Copper",  group="Commodities List")
bool useCL = input.bool(true, "Use Oil",  group="Commodities List")

macd1 = input.int(12, "Short",  minval=1, group="MACD")
macd2 = input.int(26, "Long",  minval=1, group="MACD")
macd3 = input.int(9, "Period",  minval=1, group="MACD")

bbLength = input.int(20, "Bollinger Length",  minval=1, group="Bollinger Bands")
bbMultiplier = input.float(2, "Bollinger Multiplier", minval=0.1, step=0.1, group="Bollinger Bands")
BBtouchTolerance = input.float(0.05, "Touch Tolerance (%)", minval=0, step=0.01, group="Bollinger Bands") / 100

esSymbol = "CME_MINI:ES1!"
nqSymbol = "CME_MINI:NQ1!"
vixSymbol = "TVC:VIX"
ymSymbol = "CBOT_MINI:YM1!"
ndxSymbol = "NASDAQ:NDX"
rtySymbol = "CME_MINI:RTY1!"
fdaxSymbol = "EUREX:FDAX1!"
goldSymbol = "COMEX:GC1!"
oilSymbol = "NYMEX:CL1!"
silverSymbol = "COMEX:SI1!"
copperSymbol = "COMEX:HG1!"

var float rangeHigh = na
var float rangeLow = na
var int rangeStartBar = na
var int minutesFromOpen = na
var bool rangeSet = false
var sessionFound = false
var row = 1
var table myTable = table.new(position.top_center, 13, 8, bgcolor = color.new(color.black, 100), frame_width = 1, frame_color = color.gray, border_width = 1, border_color = color.gray)

isNewSession() =>
    t = time("", sessionTimeInput)
    timeframe.isintraday and (not na(t) and na(t[1]))

if isNewSession()
    rangeHigh := na
    rangeLow := na
    rangeStartBar := bar_index
    rangeSet := false
    sessionFound := true

getMinutesFromOpen(isNewSession) =>
    if isNewSession
        0
    else
        mins = 0
        if timeframe.isminutes
            mins := mins + timeframe.multiplier
        else if timeframe.isseconds
            mins := mins + (timeframe.multiplier / 60)
        else if timeframe.isdaily or timeframe.isweekly or timeframe.ismonthly
            mins := 1000  // Just a large number to indicate we're past opening range
        
        na(mins[1]) ? mins : mins[1] + mins

if sessionFound and not rangeSet and minutesFromOpen <= rangeMin
    rangeLow := na(rangeLow) ? low : math.min(rangeLow, low)
    rangeHigh := na(rangeHigh) ? high : math.max(rangeHigh, high)
    // When opening range period completes, mark it as set
    if minutesFromOpen == rangeMin
        rangeSet := true

bg = color.new(color.black, 100)

updateTable(sym) =>
    tf = timeframe.period
    tickClose = request.security(sym, tf, close)
    tickDayOpen = request.security(sym, "1D", open)
    tickRSI = request.security(sym, tf, ta.rsi(close, rsiLen))
    tickEma = request.security(sym, tf, ta.ema(close, smEMA))
    tickEma200 = request.security(sym, tf, ta.ema(close, bigEMA))
    tickSar = request.security(sym, tf, ta.sar(start = 0.02, inc = 0.02, max=0.2))
    tickVWAP = request.security(sym, tf, ta.vwap(close))
    [tickM1, tickM2, tickMacdHist] = request.security(sym, tf, ta.macd(close, macd1, macd2, macd3))
    [tickSTPrice, tickST] = request.security(sym, tf, ta.supertrend(stLength, stMultiplier))
    [tickBBMiddle, tickBBUpper, tickBBLower] = request.security(sym, tf, ta.bb(close, bbLength, bbMultiplier))
    tickTouchingUpperBB = math.abs(tickClose - tickBBUpper) <= tickBBUpper * BBtouchTolerance
    tickTouchingLowerBB = math.abs(tickClose - tickBBLower) <= tickBBLower * BBtouchTolerance
    tickTouchingBB = tickTouchingUpperBB or tickTouchingLowerBB

    // ES | Killpips LONG | last alert | supertrend macd psar ema ema200 vwap BB RSI change %  

    table.cell(myTable, 1, row, sym, text_color=color.white, bgcolor=bg, text_size=size.small)
    table.cell(myTable, 2, row, "ðŸ¡…ðŸ¡… Killpips LONG 2", text_color=color.white, bgcolor=bg, text_size=size.small)
    table.cell(myTable, 3, row, "ðŸ¡… Long Signal - 1m ago", text_color=color.white, bgcolor=bg, text_size=size.small)

    sC = tickClose > tickVWAP ? color.green : color.maroon
    table.cell(myTable, 4, row, "VWAP", text_color=color.white, bgcolor=sC, text_size=size.small)

    sC := tickMacdHist > 0 ? color.green : color.maroon
    table.cell(myTable, 5, row, "MACD", text_color=color.white, bgcolor=sC, text_size=size.small)

    sC := tickSar < tickClose ? color.green : color.maroon
    table.cell(myTable, 6, row, "PSar", text_color=color.white, bgcolor=sC, text_size=size.small)

    sC := tickClose > tickEma ? color.green : color.maroon
    table.cell(myTable, 7, row, "21 EMA", text_color=color.white, bgcolor=sC, text_size=size.small)

    sC := tickClose > tickEma200 ? color.green : color.maroon
    table.cell(myTable, 8, row, "200 EMA", text_color=color.white, bgcolor=sC, text_size=size.small)

    percentChange = ta.changePercent(tickClose, tickDayOpen)
    sC := percentChange > 0 ? color.green : color.maroon
    table.cell(myTable, 9, row, "CH: " + str.tostring(percentChange, "#.##"), text_color=color.white, bgcolor=sC, text_size=size.small)

    sC := tickST < 0 ? color.green : color.maroon
    table.cell(myTable, 10, row, "SuperTrend", text_color=color.white, bgcolor=sC, text_size=size.small)

    sC := tickRSI > rsiOB ? color.green : tickRSI < rsiOS ? color.maroon : color.gray
    table.cell(myTable, 11, row, "RSI", text_color=color.white, bgcolor=sC, text_size=size.small)

    if (tickTouchingBB)
        sC1 = tickTouchingUpperBB ? color.green : color.maroon
        table.cell(myTable, 12, row, "BB Touch", text_color=color.white, bgcolor=sC1, text_size=size.small)
    else
        table.cell(myTable, 12, row, "BB Touch", text_color=bg, bgcolor=bg, text_size=size.small)

if barstate.islast
    row := 1
    updateTable(esSymbol)
    row := row + 1
    updateTable(nqSymbol)
    row := row + 1
    updateTable(ymSymbol)
    row := row + 1
    updateTable(vixSymbol)
    row := row + 1
    updateTable(oilSymbol)
    row := row + 1
    updateTable(goldSymbol)


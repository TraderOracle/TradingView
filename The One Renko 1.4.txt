//@version=5

//
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=  THE ONE RENKO TO RULE THEM ALL  =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// Designed to be used on Renko 1s, Traditional 4.  I primary trade the US 100 PEPPERSTONE (which is NQ futures)
// Created by TraderOracle 2023
//

indicator(title="The One Renko To Rule Them All", overlay=true, shorttitle="The One Renko 1.4")

bShowFlags = input(false, title="Show Flags", group="Main Settings")
bShowDots = input(false, title="Show Dots", group="Main Settings")
bShowX = input(true, title="Show Big X for Buy/Sell", group="Main Settings")
bUseDeadSimple = input(false, title="Use Dead Simple Reversal", group="Main Settings")
bShowST = input(false, title="Use Triple Supertrend", group="Main Settings")
bShowLux = input(false, title="Use LuxAlgo reversal signals", group="Main Settings")

bUpCurve = close > close[1] and close[1] > close[2] and close[2] > close[3] and close[3] < close[4] and close[4] < close[5] and close[5] < close[6] ? 1 : 0
bDownCurve = close < close[1] and close[1] < close[2] and close[2] < close[3] and close[3] > close[4] and close[4] > close[5] and close[5] > close[6] ? 1 : 0


//--------------------------------------------------------------------------------------------------------------
//-------------------------------   Reversal Signals [LuxAlgo]   -----------------------------------------------
//--------------------------------------------------------------------------------------------------------------

bGR  = 'LuxAlgo Reversals'
bTP  = 'Momentum phase provides an indication of the initial trend\'s momentum and identifies a point of a likely top or bottom in the ranging markets\n\n' +
         'Completed - dislays only completed momentum phases\n' +
         'Detailed - displays all counting process of the momentum phases\nNone - disables the display of the momentum phases'

bSh  = 'Completed'
ptLT = 'Step Line w/ Diamonds'
ptSR = 'Circles'

eGR  = 'LuxAlgo Reversals'
eTP  = 'Trend exhaustion phase aims to identify when the trend is fading/exhausting and possibly starting to reverse. The trend exhaustion phase starts only if a momentum phase is already established\n\n' +
         'Completed - dislays only completed trend exhaustion phases\n' +
         'Detailed - displays all counting process of the trend exhaustion phases\nNone - disables the display of the trend exhaustion phases'
eSh  = 'Completed'

tGR = 'LuxAlgo Reversals'
tTP = 'All phase specific trade setups, presented as options, are triggered once the selected phase is completed and folowed by a price flip in the direction of the trade setup. Please pay attention to the phase specific risk levels as well as the overall trend direction\n' +
       '⚠️ Trading is subject to high risk, look first then leap\n\n' +
       'Tips : \n' +
       ' - Momentum trade setups are not recommended setups, and in case applied they best fit in ranging market\n' +
       '    a trade signal, followed immediately by a warning indication can be assumed as continuation of the underlying trend and can be traded in the opposite direction of the suggested signal\n\n' +
       ' -  Exhaustion / Qualified trade setups best fits in trending market\n' +
       '    Exhaustion, suggested type of trade setup, buy (sell) when buy (sell) trend exhaustion phase is complete\n' +
       '    Qualified, trend exhaustion phase followed by momentum phase is assumed as qualified trade setup'

var BnoShw = false
Bcmpltd    = bSh == 'Completed' 
BnoShw    := bSh == 'None' ? false : true

var noShw = false
cmpltd    = eSh == 'Completed' 
noShw    := eSh == 'None' ? false : true

type bar
    float o = open
    float h = high
    float l = low
    float c = close
    int   i = bar_index

type trb 
    int   bSC
    float bSH
    float bSL

    int   sSC
    float sSH
    float sSL

type tre 
    int   bCC
    float bC8
    float bCHt
    float bCH
    float bCL
    float bCLt
    float bCD

    int   sCC
    float sC8
    float sCHt
    float sCH
    float sCL
    float sCLt
    float sCT

bar b = bar.new()
var trb S = trb.new()


noC  = #00000000
rdC  = #f23645
gnC  = #089981
whC  = #ffffff
blC  = #2962ff
grC  = #787b86
bgC  = #00bcd4

shpD = shape.labeldown
shpU = shape.labelup
locA = location.abovebar
locB = location.belowbar
dspN = false
pltL = plot.style_circles
pltS = size.tiny

f_xLX(_p, _l) =>
    (_l > _p and _l < _p[1]) or (_l < _p and _l > _p[1])

f_lnS(_s) =>
    s = switch _s
        'Circles'               => plot.style_circles
        'Step Line'             => plot.style_steplinebr
        'Step Line w/ Diamonds' => plot.style_steplinebr

ptLB = f_lnS(ptLT)
ptRS = f_lnS(ptSR)

con = b.c < b.c[4]

if con
    S.bSC := S.bSC == 9 ? 1 : S.bSC + 1
    S.sSC := 0
else
    S.sSC := S.sSC == 9 ? 1 : S.sSC + 1
    S.bSC := 0

pbS = (b.l <= b.l[3] and b.l <= b.l[2]) or (b.l[1] <= b.l[3] and b.l[1] <= b.l[2])

plotshape(bShowLux and S.bSC == 9 and not pbS and barstate.isconfirmed ? 1 : na, title="Reversal Approaching", style=shape.square, location=location.belowbar, color=color.rgb(0, 255, 132), size=size.tiny)
plotshape(bShowLux and S.bSC == 9 and     pbS and barstate.isconfirmed ? 1 : na, title="Reversal Approaching", style=shape.square, location=location.belowbar, color=color.rgb(0, 255, 132), size=size.tiny)
plotshape(bShowLux and S.bSC[1] == 8 and S.sSC == 1 and barstate.isconfirmed ? 1 : na, title="Reversal Approaching", style=shape.square, location=location.belowbar, color=color.rgb(0, 255, 132), size=size.tiny)

alertcondition(S.bSC == 9 and not pbS, title="Flag Buy", message="Flag Buy")
alertcondition(S.bSC == 9 and     pbS, title="Flag Buy", message="Flag Buy")
alertcondition(S.bSC[1] == 8 and S.sSC == 1, title="Flag Buy", message="Flag Buy")

bC8  = S.bSC[1] == 8 and S.sSC == 1

sR   = ta.highest(9)
bSR  = 0.0
bSR := S.bSC == 9 or bC8 ? sR : b.c > bSR[1] ? 0 : bSR[1]

if S.bSC == 1
    S.bSL := b.l

if S.bSC > 0
    S.bSL := math.min(b.l, S.bSL)

    if b.l == S.bSL
        S.bSH := b.h

bSD  = 0.0
bSD := S.bSC == 9 ? 2 * S.bSL - S.bSH : b.c < bSD[1] or S.sSC == 9 ? 0 : bSD[1]

psS = (b.h >= b.h[3] and b.h >= b.h[2]) or (b.h[1] >= b.h[3] and b.h[1] >= b.h[2])

plotshape(bShowLux and S.sSC == 9 and not psS and barstate.isconfirmed ? 1 : na, title="Reversal Approaching", style=shape.square, location=location.abovebar, color=color.rgb(255, 0, 0), size=size.tiny)
plotshape(bShowLux and S.sSC == 9 and     psS and barstate.isconfirmed ? 1 : na, title="Reversal Approaching", style=shape.square, location=location.abovebar, color=color.rgb(255, 0, 0), size=size.tiny)
plotshape(bShowLux and S.sSC[1] == 8 and S.bSC == 1 and barstate.isconfirmed ? 1 : na, title="Reversal Approaching", style=shape.square, location=location.abovebar, color=color.rgb(255, 0, 0), size=size.tiny)

alertcondition(S.sSC == 9 and not psS, title="Flag Sell", message="Flag Sell")
alertcondition(S.sSC == 9 and     psS, title="Flag Sell", message="Flag Sell")
alertcondition(S.sSC[1] == 8 and S.bSC == 1 and barstate.isconfirmed , title="Flag Sell", message="Flag Sell")


//
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=  ULTIMATE REVERSAL 1.22  =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// These are volume patterns I noticed after backtesting reversals for many months
// 

var cColor = color.rgb(194, 196, 197)

basis = ta.sma(close, 30)
dev = 2 * ta.stdev(close, 30)
upper = basis + dev
lower = basis - dev

is0Green = close > open
is1Green = close[1] > open[1]
is2Green = close[2] > open[2]
is3Green = close[3] > open[3]
is4Green = close[4] > open[4]
is0Red = not is0Green
is1Red = not is1Green
is2Red = not is2Green
is3Red = not is3Green
is4Red = not is4Green

// Pattern #1 - small red bar, larger red bar, small green bar
up1 = (volume[1] > volume[2] and volume < volume[1] and is0Green and is1Red and is2Red)
down1 = (volume[1] > volume[2] and volume < volume[1] and is0Red and is1Green and is2Green)

// Pattern #2 - small red bar, larger red bar, even LARGER red bar, small green bar
up2 = (volume[2] > volume[3] and volume[3] > volume[4] and volume[1] < volume[2] and volume < volume[2] and is0Green and is1Red and is2Red and is3Red and is4Red)
down2 = (volume[2] > volume[3] and volume[3] > volume[4] and volume[1] < volume[2] and volume < volume[2] and is0Red and is1Green and is2Green and is3Green and is4Green)

// Pattern #3 - 4 bars of the same color, then a different color bar that's larger than all 4 previous
up3 = (is1Red and is2Red and is3Red and is4Red and is0Green and volume > volume[1] and volume > volume[2] and volume > volume[3] and volume > volume[4])
down3 = (is1Green and is2Green and is3Green and is4Green and is0Red and volume > volume[1] and volume > volume[2] and volume > volume[3] and volume > volume[4])

// snippet from Candlestick Reversal System by LonesomeTheDove
pivotlbar = 5
highleftempty = ta.pivothigh(pivotlbar, 0)
lowleftempty = ta.pivotlow(pivotlbar, 0)
wick_multiplier = 10
body_percentage = 1

O = open
C = close
H = high
L = low

Wlongsignal = (C > O) and (O - L) >= ((C - O) * wick_multiplier) and (H - C) <= ((H - L) * body_percentage) or
   (C < O) and (C - L) >= ((O - C) * wick_multiplier) and (H - C) <= ((H - L) * body_percentage) or
   (C == O and C != H) and (H - L) >= ((H - C) * wick_multiplier) and (H - C) <= ((H - L) * body_percentage) or
   (O == H and C == H) and (H - L) >= ta.sma((H - L), 50)

Wshortsignal = (C < O) and (H - O) >= ((O - C) * wick_multiplier) and (C - L) <= ((H - L) * body_percentage) or
   (C > O) and (H - C) >= ((C - O) * wick_multiplier) and (C - L) <= ((H -L) * body_percentage) or
   (C == O and C != L) and (H - L) >= ((C - L) * wick_multiplier) and (C - L) <= ((H - L) * body_percentage) or
   (O == L and C == L) and (H - L) >= ta.sma((H - L), 50)

// Candlestick pattern is technically Pattern #4
up4 = lowleftempty and Wlongsignal
down4 = highleftempty and Wshortsignal

upsie1 = ta.rma(math.max(ta.change(close), 0), 14)
downsie1 = ta.rma(-math.min(ta.change(close), 0), 14)
MyRsi = downsie1 == 0 ? 100 : upsie1 == 0 ? 0 : 100 - (100 / (1 + upsie1 / downsie1))

BollingerCross = false

up99 = (up1 or up2 or up3 or up4)
down99 = (down1 or down2 or down3 or down4)

bColor = color.rgb(199, 197, 197)

if (MyRsi < 60)
    down99 := false
if (MyRsi > 40)
    up99 := false

// version 1.21 - I wasn't showing Bollinger Bands/RSI unless it also was volume rules, which kinda ruins the point of the update.  Fixed...
if (close < (lower - 2) or (lower - 2) and MyRsi < 30)
    bColor := color.rgb(255, 53, 53)
    up99 := true
if (close > (upper + 2) or open > (upper + 2) and MyRsi > 80)
    bColor := color.rgb(255, 53, 53)
    down99 := true

// eliminate dupes
if (up99[1])
    up99 := false
if (down99[1])
    down99 := false

atr = ta.atr(10)
pos2 = high + (1.6 * atr)
pos3 = low - (1.6 * atr)

// My implementation of DEAD SIMPLE REVERSAL from PaidToFade
q1 = close[1] < open[1] and close > open
q2 = close > open[1]
q3 = ta.lowest(low,3) < ta.lowest (low,50)[1] or ta.lowest(low,3) < ta.lowest(low,50)[2] or ta.lowest(low,3) < ta.lowest(low,50)[3]
buyme = q1 and q2 and q3

q4 = close[1] > open[1] and close < open
q5 = close < open[1]
q6 = ta.highest(high,3) > ta.highest (high,50)[1] or ta.highest(high,3) > ta.highest(high,50)[2] or ta.highest(high,3) > ta.highest(high,50)[3]
sellme = q4 and q5 and q6

if (buyme and bUseDeadSimple)
    bColor := color.lime
    //up99 := true
if (sellme and bUseDeadSimple)
    bColor := color.lime
    //down99 := true

plotshape(down99 and bShowFlags ? pos2 : na, title="Reversal Sell Signal", style=shape.flag, location=location.absolute, color=bColor, size=size.tiny)
plotshape(up99 and bShowFlags ? pos3 : na, title="Reversal Buy Signal", style=shape.flag, location=location.absolute, color=bColor, size=size.tiny)

alertcondition(up99, title="Flag Buy", message="Flag Buy")
alertcondition(down99, title="Flag Sell", message="Flag Sell")


//
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=  SQUEEZE MOMENTUM RELAXER 2.1  =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// This is an improper use of TTM Squeeze.  I capture the shift between a squeeze condition, and a relaxed condition
// 

var cGreen = 0
var cRed = 0
var pos = false 
var neg = false 

// Keltner Channel

esma(close, length)=>
	s = ta.sma(close, 20)
	e = ta.ema(close, 20)
	true ? e : s
ma1 = esma(close, 20)
rangema1 = ta.atr(10)
upper1 = ma1 + rangema1 * 2
lower1 = ma1 - rangema1 * 2

KeltnerCross = ta.crossover(close, upper1) or ta.crossover(close, lower1)

// ADX

upq4 = ta.rma(math.max(ta.change(close), 0), 14)
downq4 = ta.rma(-math.min(ta.change(close), 0), 14)
rsi = downq4 == 0 ? 100 : upq4 == 0 ? 0 : 100 - (100 / (1 + upq4 / downq4))

dirmov(len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(14, 14) // ADX DI Length = 14, ADX Length. = 14
sigabove11 = sig > 11 // ADX Value = 11

// WAE Dead Zone 

calc_macd(source, fastLength, slowLength) =>
	fastMA = ta.ema(source, fastLength)
	slowMA = ta.ema(source, slowLength)
	fastMA - slowMA

t1 = (calc_macd(close, 20, 40) - calc_macd(close[1], 20, 40))*150
t2 = (calc_macd(close[2], 20, 40) - calc_macd(close[3], 20, 40))*150

trendUp = (t1 >= 0) ? t1 : 0
trendDown = (t1 < 0) ? (-1*t1) : 0

// Squeeze Momentum

useTrueRange = true
source = close
basis5 = ta.sma(close, 20)
dev1 = 1.5 * ta.stdev(close, 20)
upperBB = basis5 + dev1
lowerBB = basis5 - dev1
ma = ta.sma(close, 20)
rangeQ = useTrueRange ? ta.tr : (high - low)
rangema = ta.sma(rangeQ, 20)
upperKC = ma + rangema * 1.5
lowerKC = ma - rangema * 1.5
sqzOn  = (lowerBB > lowerKC) and (upperBB < upperKC)
sqzOff = (lowerBB < lowerKC) and (upperBB > upperKC)
noSqz  = (sqzOn == false) and (sqzOff == false)

// Had to change this from the original
avg1 = math.avg(ta.highest(high, 20), ta.lowest(low, 20))
avg2 = math.avg(avg1, ta.sma(close, 20))
val = ta.linreg(close - avg2, 20, 0)

pos := false
neg := false

// if squeeze is bright RED, increment by one
if (val < nz(val[1]) and val < 5 and not sqzOn)
    cRed := cRed + 1   

// if squeeze is bright GREEN, increment by one
if (val > nz(val[1]) and val > 5 and not sqzOn)
    cGreen := cGreen + 1   

// if bright RED squeeze is now dim, momentum has changed.  Is ADX also above 11? - add a marker to chart
if (val > nz(val[1]) and cRed > 1 and val < 5 and not pos[1] and sigabove11 == true)
    cRed := 0
    pos := true  

// if bright GREEN squeeze is now dim, momentum has changed.  Is ADX also above 11? - add a marker to chart
if (val < nz(val[1]) and cGreen > 1 and val > 5 and not neg[1] and sigabove11 == true)
    cGreen := 0
    neg := true  

buySignal1 = pos 
sellSignal1 = neg

// Basic diamond color: Yellow as default, and Red is RSI is overbought or sold
bColor4 = (rsi < 34 or rsi > 66) ? color.rgb(255, 0, 0) : color.rgb(189, 189, 189) // RSI Overbought Value = 34, RSI Oversold Value = 66

// If we crossed Keltner channel, then color is Aqua
// cColor4 = iff(KeltnerCross, color.rgb(50, 255, 67), bColor4)
cColor4 = color.white

plotshape(buySignal1 and bShowDots ? pos : na, title="Squeeze Buy Signal", style=shape.diamond, location=location.belowbar, color=color.white, size=size.tiny)
plotshape(sellSignal1 and bShowDots ? neg : na, title="Squeeze Sell Signal", style=shape.diamond, location=location.abovebar, color=color.white, size=size.tiny)

alertcondition(buySignal1, title="Squeeze Buy", message="Squeeze Buy")
alertcondition(sellSignal1, title="Squeeze Sell", message="Squeeze Sell")


// BUY SELL SIGNALS

//buySignals = 0
//for history1 = 0 to iLookBack - 1
//    if (buySignal1[history1])
//        buySignals := buySignals + 1

//sellSignals = 0
//for history1 = 0 to iLookBack - 1
//    if (sellSignals[history1])
//        sellSignals := sellSignals + 1

//upSignals = 0
//for history1 = 0 to iLookBack - 1
//    if (up99[history1])
//        upSignals := upSignals + 1

//downSignals = 0
//for history1 = 0 to iLookBack - 1
//    if (downSignals[history1])
//        down99 := downSignals + 1

bBuyFlag = buySignal1 or buySignal1[1] or buySignal1[2] or buySignal1[3] or buySignal1[4] or buySignal1[5] or buySignal1[6]
bBuySqueeze = up99 or up99[1] or up99[2] or up99[3] or up99[4] or up99[5] or up99[6]

bSellFlag = sellSignal1 or sellSignal1[1] or sellSignal1[2] or sellSignal1[3] or sellSignal1[4] or sellSignal1[5] or sellSignal1[6]
bSellSqueeze = down99 or down99[1] or down99[2] or down99[3] or down99[4] or down99[5] or down99[6]

plotshape(bUpCurve and bBuyFlag and bBuySqueeze and bShowX ? 1 : na, title="X Buy Signal", location=location.belowbar, style=shape.xcross, size=size.normal, color=color.rgb(11, 255, 141))
plotshape(bDownCurve and bSellFlag and bSellSqueeze and bShowX ? 1 : na, title="X Sell Signal", location=location.abovebar, style=shape.xcross, size=size.normal, color=color.rgb(255, 12, 12)) 

alertcondition(bUpCurve and bBuyFlag and bBuySqueeze, title='Big X BUY', message='Big X BUY')
alertcondition(bDownCurve and bSellFlag and bSellSqueeze, title='Big X SELL', message='Big X SELL')


//
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=   TRIPLE SUPERTREND  =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 

var crossoverBear = false
var crossoverBull = false

bStrictMode = input(false, title="Strict Mode (less results)", group="Triple Supertrend Settings", tooltip = "Normally show when 2 out of 3 supertrends are active, but his mode requires 3/3 to be active")
bEnableMACD = input(false, title="Filter using MACD", group="Triple Supertrend Settings", tooltip = "Only show when MACD also lines up")
adxThreshold = input(30, title="ADX Threshold", group="Triple Supertrend Settings", tooltip="ADX value that must be reached in order for an indicator to display.  Larger numbers will filter out more noise")

fastMA = input(title="Fast moving average", defval=12,  group="MACD")
slowMA = input(title="Slow moving average", defval=26, group="MACD")

// Average Directional Index
adxlen = input(14, title="ADX Smoothing", group="ADX")
dilen = input(14, title="DI Length", group="ADX")
adxValueST = adx(dilen, adxlen)

// MACD
signalLength = input(9)
[currMacd,_,_] = ta.macd(close[0], fastMA, slowMA, signalLength)
[prevMacd,_,_] = ta.macd(close[1], fastMA, slowMA, signalLength)
signal = ta.ema(currMacd, signalLength)

if (ta.cross(currMacd, signal) and currMacd < signal and currMacd >= -2)
	crossoverBear := true
	crossoverBull := false

if (ta.cross(currMacd, signal) and currMacd > signal and currMacd <= 2 )
	crossoverBull := true
	crossoverBear := false

atr2 = ta.sma(ta.tr, 10)
upST = hl2-(1*atr2)
up1D = nz(upST[1],upST)
upST := close[1] > up1D ? math.max(upST,up1D) : upST
dnST = hl2+(1*atr2)
dn1D = nz(dnST[1], dnST)
dnST := close[1] < dn1D ? math.min(dnST, dn1D) : dnST
trend = 1
trend := nz(trend[1], trend)
trend := trend == -1 and close > dn1D ? 1 : trend == 1 and close < up1D ? -1 : trend
buySignal = trend == 1 and trend[1] == -1
sellSignal = trend == -1 and trend[1] == 1
changeCond = trend != trend[1]

atr20 = ta.sma(ta.tr, 11)
up0 =hl2-(2*atr20)
up10 = nz(up0[1],up0)
up0 := close[1] > up10 ? math.max(up0,up10) : up0
dn0=hl2+(2*atr20)
dn10 = nz(dn0[1], dn0)
dn0 := close[1] < dn10 ? math.min(dn0, dn10) : dn0
trend0 = 1
trend0 := nz(trend0[1], trend0)
trend0 := trend0 == -1 and close > dn10 ? 1 : trend0 == 1 and close < up10 ? -1 : trend0
buySignal0 = trend0 == 1 and trend0[1] == -1
changeCond0 = trend0 != trend0[1]

atr29 = ta.sma(ta.tr, 12)
up9=hl2-(3*atr29)
up19 = nz(up9[1],up9)
up9 := close[1] > up19 ? math.max(up9,up19) : up9
dn9=hl2+(3*atr29)
dn19 = nz(dn9[1], dn9)
dn9 := close[1] < dn19 ? math.min(dn9, dn19) : dn9
trend9 = 1
trend9 := nz(trend9[1], trend9)
trend9 := trend9 == -1 and close > dn19 ? 1 : trend9 == 1 and close < up19 ? -1 : trend9

changeCond9 = trend9 != trend9[1]

var showUp = false 
var showDn = false

if (not bStrictMode)
    showUp := (trend9==1 and up9 and trend==1 and upST and trend0==1 and up0) or (trend9==1 and up9 and trend==1 and upST) or (trend9==1 and up9 and trend0==1 and up0) or (trend==1 and upST and trend0==1 and up0) 
    showDn := (trend9!=1 and dn9 and trend!=1 and dnST and trend0!=1 and dn0) or (trend9!=1 and dn9 and trend!=1 and dnST) or (trend9!=1 and dn9 and trend0!=1 and dn0) or (trend!=1 and dnST and trend0!=1 and dn0) 
else
    showUp := (trend9==1 and up9 and trend==1 and upST and trend0==1 and up0)
    showDn := (trend9!=1 and dn9 and trend!=1 and dnST and trend0!=1 and dn0)

if (bEnableMACD and not crossoverBull)
    showUp := false

if (bEnableMACD and not crossoverBear)
    showDn := false

displayUp = showUp and not showUp[1]
displayDn = showDn and not showDn[1]

plotshape(bShowST and displayUp and adxValueST > adxThreshold ? 1 : na, title="Buy", text="Buy", location=location.belowbar, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white)
plotshape(bShowST and displayDn and adxValueST > adxThreshold ? 1 : na, title="Sell", text="Sell", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white)

alertcondition(displayUp and adxValueST > adxThreshold, title="TripleSuperTrend Buy", message="TripleSuperTrend Buy")
alertcondition(displayDn and adxValueST > adxThreshold, title="TripleSuperTrend Sell", message="TripleSuperTrend Sell")

